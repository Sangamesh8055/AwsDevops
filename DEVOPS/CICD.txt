CICD: Continous Integration Continous Deployment/Delivery:-
	 CI/CD is a set of best practices, principles, and tools that aim to automate
	 the process of integrating code changes and deploying applications to production 
	 in a more efficient and reliable manner.


 CICD comes into picture where-
	Unit Testing, Static Code Analysis, Code Quality/ Vulnerability, Automation, Reports, 
	 Deployment   stages are done automatically rather than doing manual.

CICD is a way which makes as software faster, safer, efficient by automating the process like building, testing and deploying of the software.

CI:-  Continuous Integration is a development practice where code changes from multiple contributors are automatically integrated into a shared repository
	several times a day.
	Key Aspects:-
	* Automated Build.
	* Automated Testing.
	* Code Quality Check.
	* Frequent Integration.
	* Immediate Feedback.
      Tools:- Jenkins

CD:-  Continuous Deployment is an extension of CI, where code changes that pass automated tests are automatically deployed to production without manual intervention. 
        Key Aspects:-
	* Automated Deployment.( Kubernetes with ArgoCD).
	* Rollbacks.(In Kubernetes).
	* Continous Monitoring.( Prometheus with Grafana).

STAGES:-
1). Source stage:- 
	Starting stage of the cicd pipeline, when any changes made to the code andpushed to the repository , the cicd pipeline will we triggered 
	to go to the next stage (Build stage).
2). Build stage:- 
	Here build stgae is combined with dependencies and libraries to create a build that can be deployed in your platform but after build stage 
	it will goto Test stage.
3). Test stage:-
	Here there are going to be automated tests to test your application code and vulnerabilities if any problems occurs we will resolves and if it is passed,
	goes to next stage which is deploy stage.
4). Deploy stage:-
	Here our application deployed on a server using containerization or container orchestration platform after it has passed all the stages successfully.


Benifits of using cicd:-
* Quicker time to market.
* Reduces manual work.
* Higher Software quality.
* Reduced risk.
* Collaboration.
 

Explain the Cicd Process From a Project:-

  * I used Version-Control(GitHub) as a source code repository and target platform is Kubernetes.
  * Let say user(Developer) who tries to Code commit to Version control system Repository.
  * And i used an Orchestrator Continous Integration Continous Delivery(CI/CD) like Jenkins.
    The reason foor using Jenkins is, whenever a code commits into the github repository, 
    Git webhook triggers the pipeline in our orchestrator (Webhook Connectivity)  it is a Continous Integration Part.
  * As part of CI Jenkins, there are multiple stages:-
	1) As part of the first stage, we will checkout the code(the code commit that the user had made).
	2) and will build code along with unit test cases(used MAVEN in Building, and unit testing framework to unit test). 
	3) Then we moved to code scanning(for scanning used Sonarqube repositroy for security / vulnerability).
	4) Because the target platform is Kubernetes, I try to build Docker Image (for this we use Dockerfile in the Github Repository).
	5) Once the image is build the next and important stage is image scaning(we will verify the image which is created Successfully or any vulnerability).
	6) After Image is created the next step is to push image onto Image registry(Dockerhub).
     For all these steps used Jenkins Declarative Pipeline.
  * The next is to get the image onto Kubernetes platform,  using the same Jenkins pipeline updated the Git repository with the image that created in last stage (Image push).
  *Using the Ansible(Configuration Managment tool) from updated repository , Deployed Image on to Kubernetes Cluster (Play with k8s, Minikube). 
