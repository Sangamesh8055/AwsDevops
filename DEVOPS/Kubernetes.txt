CONTAINER ORCHESTRATION:-
	It is a process of managing, deploying, and scaling containerized applications. Containers, such as those created with Docker,
	 package an application and its dependencies together.

   Why Container Orchestartion:-
	 when you have a large number of containers that make up a complex application or service, orchestrating these containers
	 becomes essential to streamline operations, improve scalability, and enhance reliability. Container orchestration tools automate 
 	 the deployment, scaling, and management of containerized applications.

   Features:-
	* Cluster Management- It manages clusters of machines(Nodes). These clusters provides infrastructure for running and deploying containerized application.
	* Scaling           - Refers to ability to adjust the number of running instances(replicas) of a application on demand. 
	* Load Balancing    - To distribute incoming network traffic across multiple containers, container orchestration tools often include built-in load balancing mechanisms.
	* Health Monitoring - If a container or service fails or becomes unhealthy, the orchestrator can take corrective actions, such as restarting the container on a healthy node.
	* Rolling Updates and Rollbacks -  Container orchestration simplifies the process of updating applications by facilitating rolling updates, where new versions of containers are 
					   gradually deployed while the old versions continue to run. If issues arise, rollbacks to previous versions can be performed.

  KUBERNETES:-
	Kubernetes is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. 

  Features:-
	* Containers:-    Kubernetes leverages container technology. Because containers are ephemeral(short life).
	* Pods:-          The basic building block of kubernetes is pods, which is the smallest and simplest unit.
			   (In Pods there can be multiple Containers).
	* Deployments:-   Deployments are higher level abstraction in kubernetes that enable declarative updates to application.
			   They manage deployment and scaling of Pods.
	* Services:-      Kubernetes Services provide a stable endpoint (IP address and DNS name) for a set of Pods.
			   They enable load balancing and discovery within the cluster, allowing applications to communicate with each other.
	* Nodes:-         A Kubernetes cluster consists of a set of nodes (physical or virtual machines) that run containerized applications. 
			   Nodes are managed by the control plane and host the workloads.
	* Control Plane:- The control plane is the brain of the Kubernetes cluster, responsible for managing and controlling the cluster's state. 
			   It includes components like the API server, etcd (distributed key-value store), scheduler, and controller manager.
	* Namespace:-     Namespaces provide a way to divide cluster resources into virtual clusters. 
	* Ingress:-       Ingress controllers provide HTTP and HTTPS routing to services within the cluster. 
			   They enable external access to applications and allow for the configuration of rules for routing traffic.
	* Kubelet:-        The Kubelet is an agent that runs on each node in the cluster and is responsible for ensuring that containers are running in a Pod.